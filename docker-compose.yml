version: '3.8'

# Docker Compose configuration for Spring Boot Microservices
# This file orchestrates three microservices:
# 1. accounts - Dockerized using traditional Dockerfile
# 2. loans - Dockerized using Spring Boot Buildpacks
# 3. cards - Dockerized using Google Jib
#
# Usage:
# - Build all services: docker-compose build
# - Start all services: docker-compose up -d
# - View logs: docker-compose logs -f
# - Stop all services: docker-compose down
# - Stop and remove volumes: docker-compose down -v

services:
  # Accounts Service - Core banking account management
  accounts:
    image: nazjara/accounts:1.0.0-SNAPSHOT
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CONFIG_SERVER_URI=http://config-server:8071
      - SPRING_RABBITMQ_HOST=rabbitmq
      - DB_URL=jdbc:mysql://mysql-accounts:3306/accountsdb
      - SPRING_EUREKA_SERVER_URI=http://discovery-service:8070
    depends_on:
      discovery-service:
        condition: service_healthy
      mysql-accounts:
        condition: service_healthy
    networks:
      - microservices-network
    container_name: accounts-service
    restart: unless-stopped
    volumes:
      - accounts-data:/app/data

  # Loans Service - Manages loan products and applications
  # Dockerized using Spring Boot Buildpacks
  loans:
    # Using Spring Boot Buildpacks (no explicit Dockerfile needed)
    # The Spring Boot Maven plugin will create the image
    image: nazjara/loans:1.0.0-SNAPSHOT
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CONFIG_SERVER_URI=http://config-server:8071
      - SPRING_RABBITMQ_HOST=rabbitmq
      - DB_URL=jdbc:mysql://mysql-loans:3306/loansdb
      - SPRING_EUREKA_SERVER_URI=http://discovery-service:8070
    depends_on:
      discovery-service:
        condition: service_healthy
      mysql-loans:
        condition: service_healthy
    networks:
      - microservices-network
    container_name: loans-service
    restart: unless-stopped
    volumes:
      - loans-data:/app/data

  # Cards Service - Manages credit and debit card products
  # Dockerized using Google Jib
  cards:
    # Using Google Jib for containerization
    # The image is built during the Maven build process
    image: nazjara/cards:1.0.0-SNAPSHOT
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CONFIG_SERVER_URI=http://config-server:8071
      - SPRING_RABBITMQ_HOST=rabbitmq
      - DB_URL=jdbc:mysql://mysql-cards:3306/cardsdb
      - SPRING_EUREKA_SERVER_URI=http://discovery-service:8070
    depends_on:
      discovery-service:
        condition: service_healthy
      mysql-cards:
        condition: service_healthy
    networks:
      - microservices-network
    container_name: cards-service
    restart: unless-stopped
    volumes:
      - cards-data:/app/data

  # Config Server - Centralized configuration management
  config-server:
    image: nazjara/configserver:1.0.0-SNAPSHOT
    ports:
      - "8071:8071"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_RABBITMQ_HOST=rabbitmq
    networks:
      - microservices-network
    container_name: config-server
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - configserver-data:/app/data
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  discovery-service:
    image: nazjara/discovery-service:1.0.0-SNAPSHOT
    ports:
      - "8070:8070"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_CONFIG_SERVER_URI=http://config-server:8071
    networks:
      - microservices-network
    container_name: discovery-service
    restart: unless-stopped
    depends_on:
      config-server:
        condition: service_healthy
    volumes:
      - discovery-service-data:/app/data
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
      
  gateway-service:
    image: nazjara/gateway-service:1.0.0-SNAPSHOT
    ports:
      - "8072:8072"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CONFIG_SERVER_URI=http://config-server:8071
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_EUREKA_SERVER_URI=http://discovery-service:8070
      - SPRING_REDIS_HOST=redis
    networks:
      - microservices-network
    container_name: gateway-service
    restart: unless-stopped
    depends_on:
      accounts:
        condition: service_started
      loans:
        condition: service_started
      cards:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - gateway-service-data:/app/data
    healthcheck:
      test: "curl --fail --silent localhost:8072/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  # RabbitMQ - Message broker for Spring Cloud Bus
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # RabbitMQ standard port
      - "15672:15672"  # RabbitMQ management port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - microservices-network
    container_name: rabbitmq
    restart: unless-stopped
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - microservices-network
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis-data:/var/lib/redis
    command: [ "redis-server", "--appendonly", "yes" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  mysql-accounts:
    image: mysql:8.0
    container_name: mysql-accounts
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=accountsdb
    networks:
      - microservices-network
    restart: unless-stopped
    volumes:
      - mysql-accounts-data:/var/lib/mysql-accounts
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
      
  mysql-cards:
    image: mysql:8.0
    container_name: mysql-cards
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=cardsdb
    networks:
      - microservices-network
    restart: unless-stopped
    volumes:
      - mysql-cards-data:/var/lib/mysql-cards
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
      
  mysql-loans:
    image: mysql:8.0
    container_name: mysql-loans
    ports:
      - "3308:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=loansdb
    networks:
      - microservices-network
    restart: unless-stopped
    volumes:
      - mysql-loans-data:/var/lib/mysql-loans
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

networks:
  microservices-network:
    driver: bridge

volumes:
  accounts-data:
  configserver-data:
  rabbitmq-data:
  loans-data:
  cards-data:
  mysql-accounts-data:
  mysql-cards-data:
  mysql-loans-data:
  discovery-service-data:
  gateway-service-data:
  redis-data:
